#!/bin/bash
#
# Copyright 2019, 2020 Red Hat, Inc.
#
# NAME
#     lab-boot-review - grading script for RH134 Controlling the Boot Process
#                       lab
#
# SYNOPSIS
#     lab-boot-review {start|grade|finish}
#
#        start   - prepare the system for starting the lab
#        grade   - perform evaluation steps on the system
#        finish  - perform post-lab cleanup
#
# DESCRIPTION
#     This script, based on singular argument, either does start, grade, or
#     finish for the Controlling the Boot Process lab.
#
# CHANGELOG
#   * Tue Aug 25 2020 Herve Quatremain <hquatrem@redhat.com>
#   - fixing UEFI boot issues
#   * Wed Mar 27 2019 Herve Quatremain <hquatrem@redhat.com>
#   - original code


PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
target='serverb'
root_password='redhat'
UUID='4d5c85a5-8921-4a06-8aff-80567e9689bc'

# This defines which subcommands are supported (start, grade, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(start grade finish)


function lab_start {

  print_header 'Starting lab.'

  print_line "Preparing ${target} for lab exercise work:"
  print_line
  host_reachable ${target}

  rhel_backup ${target} /boot/efi/EFI/redhat/grub.cfg /boot/efi/EFI/redhat/grubenv /etc/default/grub /boot/grub2/grub.cfg /boot/grub2/grubenv /boot/loader /etc/fstab /etc/selinux/config

  pad " · Updating GRUB2 countdown on ${target}"
  ${ssh} ${target} "sed -i -e 's/GRUB_TIMEOUT=.*/GRUB_TIMEOUT=20/' -e '/GRUB_CMDLINE_LINUX=/s/console=[^ ]*//g' /etc/default/grub"
  print_SUCCESS

  rhel_grub2_mkconfig ${target}

  pad " · Setting SELinux in Permissive mode on ${target}"
  ${ssh} ${target} "sed -i -e 's/^SELINUX=.*/SELINUX=permissive/' /etc/selinux/config"
  print_SUCCESS

  pad " · Breaking the boot process on ${target}"
  ${ssh} ${target} "(echo; echo 'UUID=${UUID}   /olddata   xfs   defaults   0 0') >> /etc/fstab"
  print_SUCCESS

  pad " · Updating root password on ${target}"
  if ${ssh} ${target} "echo 424242424242 | passwd --stdin root"
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Rebooting ${target}"
  ${ssh} ${target} "systemctl reboot"
  print_SUCCESS

  print_line
}


function lab_grade {

  print_header "Grading the student's work on ${target}:"
  host_reachable ${target}

  pad " · root password is ${root_password}"
  FULLHASH=$(${ssh} ${target} "grep '^root:' /etc/shadow | cut -d: -f 2")
  SALT=$(echo ${FULLHASH} | cut -d'$' -f 3)
  ENCRYPTION=$(echo ${FULLHASH} | cut -d'$' -f 2)
  NEWHASH=$(echo ${root_password} | openssl passwd -${ENCRYPTION} -salt ${SALT} -stdin)
  if [ "${FULLHASH}" == "${NEWHASH}" ]
  then
    print_PASS
  else
    print_FAIL
  fi

  pad ' · The boot issue is fixed'
  if ! ${ssh} ${target} "grep -qE '^[[:space:]]*UUID=${UUID}' /etc/fstab"
  then
    print_PASS
  else
    print_FAIL
  fi

  pad ' · The default target is graphical'
  if ${ssh} ${target} "systemctl get-default | grep -q graphical.target"
  then
    print_PASS
  else
    print_FAIL
  fi

  # Overall grade
  print_line
  pad 'Overall lab grade'
  if [[ ${fail_count} -eq 0 ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  print_line
}


function lab_finish {

  print_header "Cleaning up the lab on ${target}:"
  host_reachable ${target}

  pad " · Reseting root password on ${target}"
  if ${ssh} ${target} "echo redhat | passwd --stdin root"
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Setting the default systemd target on ${target}"
  ${ssh} ${target} "systemctl set-default multi-user.target"
  print_SUCCESS

  rhel_restore ${target}

  pad " · Setting SELinux in Enforcing mode on ${target}"
  ${ssh} ${target} "restorecon /etc/shadow"
  ${ssh} ${target} "setenforce 1"
  print_SUCCESS

  print_line
  print_line 'Lab finished.'
  print_line
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
