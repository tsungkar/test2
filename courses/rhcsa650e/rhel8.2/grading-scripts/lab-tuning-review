#!/bin/bash
#
# Copyright 2019 Red Hat, Inc.
#
# NAME
#     lab-tuning-review - grading script for RH134 Lab
#                         Tuning System Performance
#
# SYNOPSIS
#     lab-tuning-review {start|grade|finish}
#
#        start   - prepare the system for starting the lab
#        grade   - perform evaluation steps on the system
#        finish  - perform post-lab cleanup
#
# DESCRIPTION
#     This script, based on singular argument, either does start, grading,
#     or finish for the Tuning System Performance lab.
#
# CHANGELOG
#   * Wed Mar 20 2019 Victor Costea <vcostea@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
target='serverb'

# This defines which subcommands are supported (start, grade, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(start grade finish)

function start_nice_processes {
  ${ssh} ${target} "nohup nice -n 2 sha1sum /dev/zero >& /dev/null &"
  ${ssh} ${target} "nohup nice -n -2 md5sum /dev/zero >& /dev/null &"
}

function kill_nice_processes {
  ${ssh} ${target} "pkill sha1sum"
  ${ssh} ${target} "pkill md5sum"
}

function check_process_nice {

  NICEVALUE=$2
  NICESET=$(${ssh} ${target} 'ps -onice $(pgrep '${1}') | tail -n +2')
  if [ "${NICEVALUE}" -eq "${NICESET}" ]; then
    print_PASS
  else
    print_FAIL
  fi
}

function lab_start {

  print_header 'Starting lab.'

  print_line "Preparing ${target} for lab exercise work:"
  print_line

  pad " · Check ${target} connectivity"
  host_reachable ${target}
  print_SUCCESS

  pad " · Start processes for lab"  print_line "Preparing ${target} for lab exercise work:"

  if start_nice_processes; then
    print_SUCCESS
  else
    print_FAIL
  fi

  print_line
}

function lab_grade {

  active_profile='balanced'

  print_header "Grading the student's work on ${target}:"
  host_reachable ${target}

  pad " · Check nice levels"
  check_process_nice sha1sum 10

  pad " · Check active tuning profile"
  chk_active_profile=$(${ssh} ${target} tuned-adm active | awk -F: '{print $2}')
  if [ ${chk_active_profile} = ${active_profile} ]; then
    print_PASS
  else
    print_FAIL
  fi


  # Overall grade
  print_line
  pad 'Overall lab grade'
  if [[ ${fail_count} -eq 0 ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  print_line
}

function lab_finish {

  default_profile='virtual-guest'
  is_tuned_installed='yum list installed | grep tuned'
  set_default_profile="tuned-adm profile ${default_profile}"


  print_header "Cleaning up the lab on ${target}:"
  host_reachable ${target}

  pad " · Stop processes used during lab"
  kill_nice_processes
  print_SUCCESS

  pad " · Set active tuning profile to ${default_profile}"
  if ${ssh} ${target} "${is_tuned_installed}"; then
    ${ssh} ${target} "${set_default_profile}"
    print_SUCCESS
  else
    print_FAIL
  fi


  print_line
  print_line 'Lab finished.'
  print_line
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
