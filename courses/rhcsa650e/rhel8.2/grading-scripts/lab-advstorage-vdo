#!/bin/bash
#
# Copyright 2019 Red Hat, Inc.
#
# NAME
#     lab-advstorage-vdo - grading script for RH134 Compressing and Deduplicating Storage with VDO
#
# SYNOPSIS
#     lab-advstorage-vdo {start|finish}
#
#        start   - prepare the system for starting the lab
#        finish  - perform post-lab cleanup
#
# DESCRIPTION
#     This script, based on singular argument, either does start
#     or finish for the Compressing and Deduplicating Storage with VDO Guided Exercise.
#
# CHANGELOG
#   * Thu Mar 28 2019 Saumik Paul <saumik@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
target='servera'
ge_user='student'
ge_disk='/dev/vdd'
ge_vdo_volume='vdo1'
ge_vdo_node='/dev/mapper/vdo1'
ge_volume_dir='/mnt/vdo1'
ge_source_file='/root/install.img'
ge_download_url='http://content.example.com/rhel8.2/x86_64/dvd/images/install.img'

# This defines which subcommands are supported (start, grade, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(start finish)


function lab_start {

  reqd_package='vdo'        # Just an example

  print_header 'Starting lab.'

  print_line "Preparing ${target} for lab exercise work:"
  print_line
  host_reachable ${target}


  # Check for lab prerequisites (perhaps a required package?).
  if ! ${ssh} ${target} "rpm -q --quiet ${reqd_package}"
  then
    pad " · Error - ${reqd_package} is not installed on ${target}"
    print_FAIL
  else
    pad " · Downloading install.img on ${target}"
    if ${ssh} ${target} "test -f ${ge_source_file}" &&
       ${ssh} ${target} "test -s ${ge_source_file}"
    then
      print_SUCCESS
    else
      ${ssh} ${target} "rm -rf ${ge_source_file}* && until test -f ${ge_source_file}  && test -s ${ge_source_file}; do curl -s -o ${ge_source_file} ${ge_download_url} ; done"
      if ${ssh} ${target} "test -f ${ge_source_file}" &&
         ${ssh} ${target} "test -s ${ge_source_file}"
      then
	print_SUCCESS
      else
	print_FAIL
      fi
    fi

    pad " · Ensuring vdo1 volume does not exist on ${target}"
    ${ssh} ${target} "umount ${ge_volume_dir}"
    ${ssh} ${target} "rm -rf ${ge_volume_dir}"
    no_vdo_verify=$(${ssh} ${target} "vdo list" | grep ${ge_vdo_volume} | wc -l)
    if [ "${no_vdo_verify}" -eq 0 ] &&
       ! ${ssh} ${target} "test -d ${ge_volume_dir}"
    then
      print_SUCCESS
    else
      ${ssh} ${target} "vdo remove --name=${ge_vdo_volume}"
      no_vdo_verify=$(${ssh} ${target} "vdo list" | grep ${ge_vdo_volume} | wc -l)
      if [ "${no_vdo_verify}" -eq 0 ] &&
         ! ${ssh} ${target} "test -d ${ge_volume_dir}"
      then
	print_SUCCESS
      else
	print_FAIL
      fi
    fi

    pad " · Verifying that ${ge_disk} is clean on ${target}"
    ${ssh} ${target} "dd if=/dev/zero of=${ge_disk} bs=1M count=500"
    no_part_verify=$(${ssh} ${target} "lsblk ${ge_disk}" | grep part | wc -l)
    if [ "${no_part_verify}" -eq 0 ]
    then
      print_SUCCESS
    else
      print_FAIL
    fi

    print_line
  fi
}

function lab_finish {

  print_header "Completing the lab on ${target}:"
  host_reachable ${target}

  pad " · Removing install.img from ${target}"
  if ! ${ssh} ${target} "test -e ${ge_source_file}"
  then
    print_SUCCESS
  else
    ${ssh} ${target} "rm -rf ${ge_source_file}*"
    if ! ${ssh} ${target} "test -e ${ge_source_file}"
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  pad " · Removing vdo1 volume from ${target}"
  ${ssh} ${target} "umount ${ge_volume_dir}"
  ${ssh} ${target} "rm -rf ${ge_volume_dir}"
  no_vdo_verify=$(${ssh} ${target} "vdo list" | grep ${ge_vdo_volume} | wc -l)
  if [ "${no_vdo_verify}" -eq 0 ] &&
     ! ${ssh} ${target} "test -d ${ge_volume_dir}"
  then
    print_SUCCESS
  else
    ${ssh} ${target} "vdo remove --name=${ge_vdo_volume}"
    no_vdo_verify=$(${ssh} ${target} "vdo list" | grep ${ge_vdo_volume} | wc -l)
    if [ "${no_vdo_verify}" -eq 0 ] &&
       ! ${ssh} ${target} "test -d ${ge_volume_dir}"
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  pad " · Verifying that ${ge_disk} is clean on ${target}"
  ${ssh} ${target} "dd if=/dev/zero of=${ge_disk} bs=1M count=500"
  no_part_verify=$(${ssh} ${target} "lsblk ${ge_disk}" | grep part | wc -l)
  if [ "${no_part_verify}" -eq 0 ]
  then
    print_SUCCESS
  else
    print_FAIL
  fi


  print_line
  print_line 'Lab finished.'
  print_line
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
