#!/bin/bash
#
# Copyright 2019 Red Hat, Inc.
#
# NAME
#     lab-rhcsa-compreview2 - grading script for RHCSA Comprehensive
#                             Review 2
#
# SYNOPSIS
#     lab-rhcsa-compreview1 {start|grade|finish}
#
#        start   - prepare the system for starting the lab
#        grade   - perform evaluation steps on the system
#        finish  - perform post-lab cleanup
#
# DESCRIPTION
#     This script, based on singular argument, either does start, grading,
#     or finish for the RHCSA Comprehesive Review I.
#
# CHANGELOG
#   * Mon May 27 2019 Saumik Paul <saumik@redhat.com>
#   - Modified code to enable (at start)/disable (at finish) sshpass on servera
#   - Modified grade to evaluate the impact of the firewall rules
#   * Wed Apr 05 2019 Saumik Paul <saumik@redhat.com>
#   - original code


PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
target='workstation'
targeta='servera'
targetb='serverb'
comp_review3_selinux_conf='/etc/selinux/config'
comp_review3_selinux_tmp='/tmp/selinx_conf.orig'
comp_review3_httpd_conf='/etc/httpd/conf/httpd.conf'
comp_review3_httpd_tmp='/tmp/httpd_conf.orig'
comp_review3_user1='production5'
comp_review3_user1_uid='5001'
comp_review3_user1_secret='/tmp/id_rsa'
comp_review3_user1_pubkey='/tmp/id_rsa.pub'
comp_review3_user1_authorized='/home-directories/production5/.ssh/authorized_keys'
comp_review3_share='/home-directories/production5'
comp_review3_share_tab='/var/lib/nfs/etab'
content_rhel_ver='rhel8.2'

# This defines which subcommands are supported (start, grade, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(start grade finish)


function lab_start {

  print_header 'Starting lab.'

  print_line "Preparing ${targeta} and ${targetb} for lab exercise work:"
  print_line
  host_reachable ${targeta} ${targetb}


    pad " · Installing sshpass on ${target}"
    if "test -f /etc/yum.repos.d/ansible.repo" &&
       "test -s /etc/yum.repos.d/ansible.repo"
    then
      if yum -y install sshpass
      then
        print_SUCCESS
      else
        print_FAIL
      fi
    else
      cat > /tmp/ansible.repo << EOF
[ansible-2.9-for-rhel-8-x86_64-rpms]
baseurl = http://content.example.com/${content_rhel_ver}/x86_64/rhel8-additional/ansible-2.9-for-rhel-8-x86_64-rpms
enabled = true
gpgcheck = false
name = Red Hat Enterprise Linux 8.0 Additional (dvd)
EOF
      if cp /tmp/ansible.repo /etc/yum.repos.d/ &&
         rm -f /tmp/ansible.repo &&
         yum -y install sshpass
      then
        print_SUCCESS
      else
        print_FAIL
      fi
    fi

    pad " · Installing sshpass on ${targeta}"
    if ${ssh} ${targeta} "test -f /etc/yum.repos.d/ansible.repo" &&
       ${ssh} ${targeta} "test -s /etc/yum.repos.d/ansible.repo"
    then
      if ${ssh} ${targeta} "yum -y install sshpass"
      then
        print_SUCCESS
      else
        print_FAIL
      fi
    else
      cat > /tmp/ansible.repo << EOF
[ansible-2.9-for-rhel-8-x86_64-rpms]
baseurl = http://content.example.com/${content_rhel_ver}/x86_64/rhel8-additional/ansible-2.9-for-rhel-8-x86_64-rpms
enabled = true
gpgcheck = false
name = Red Hat Enterprise Linux 8.0 Additional (dvd)
EOF
      if ${scp} /tmp/ansible.repo ${targeta}:/etc/yum.repos.d/ &&
         rm -f /tmp/ansible.repo &&
         ${ssh} ${targeta} "yum -y install sshpass"
      then
        print_SUCCESS
      else
        print_FAIL
      fi
    fi

    pad " · Ensuring clean SSH keypair on ${targetb}"
    ${ssh} ${targeta} "rm -f /home/student/.ssh/authorized_keys*"
    ${ssh} ${targetb} "rm -rf /home/student/.ssh"
    if ! ${ssh} ${targetb} "test -d /home/student/.ssh" &&
       ! ${ssh} ${targetb} "test -s /home/student/.ssh/authorized_keys"
    then
      print_SUCCESS
    else
      print_FAIL
    fi

    pad " · Backing up SELinux configuration on ${targeta}"
    ${ssh} ${targeta} "cp -f ${comp_review3_selinux_conf} ${comp_review3_selinux_tmp}"
    if ${ssh} ${targeta} "test -s ${comp_review3_selinux_tmp}"
    then
      print_SUCCESS
    else
      print_FAIL
    fi

    pad " · Ensuring clean SELinux Boolean setting on ${targetb}"
    ${ssh} ${targetb} "setsebool -P use_nfs_home_dirs false"
    if ${ssh} ${targetb} "getsebool use_nfs_home_dirs" | grep off
    then
      print_SUCCESS
    else
      print_FAIL
    fi

    pad " · Creating the ${comp_review3_user1} user on ${targeta} and ${targetb}"
    ${ssh} ${targeta} "useradd -u 5001 ${comp_review3_user1}"
    ${ssh} ${targeta} "echo redhat | passwd --stdin ${comp_review3_user1}"
    ${ssh} ${targetb} "useradd -M -u 5001 -d /localhome/${comp_review3_user1} ${comp_review3_user1}"
    ${ssh} ${targetb} "echo redhat | passwd --stdin ${comp_review3_user1}"
    if ${ssh} ${targeta} "getent passwd ${comp_review3_user1}" | grep 5001 &&
       ${ssh} ${targetb} "getent passwd ${comp_review3_user1}" | grep 5001 | grep localhome
    then
      print_SUCCESS
    else
      print_FAIL
    fi

    pad " · Exporting ${comp_review3_share} from ${targeta}"
    ${ssh} ${targeta} "systemctl enable --now nfs-server.service"
    ${ssh} ${targeta} "firewall-cmd --permanent --add-service=nfs; firewall-cmd --permanent --add-service=rpc-bind; firewall-cmd --permanent --add-service=mountd; firewall-cmd --reload"
    ${ssh} ${targeta} "mkdir -p ${comp_review3_share}"
    ${ssh} ${targeta} "chmod 700 ${comp_review3_share}"
    ${ssh} ${targeta} "cp -f /etc/skel/.* ${comp_review3_share}/"
    ${ssh} ${targeta} "chown -R ${comp_review3_user1}:${comp_review3_user1} ${comp_review3_share}"
    ${ssh} ${targeta} "echo '/home-directories/production5 serverb.lab.example.com(rw,sync)' > /etc/exports.d/production5.exports; exportfs -rv"
    if ${ssh} ${targeta} "grep ${comp_review3_share} ${comp_review3_share_tab} | grep ${targetb}.lab.example.com" | grep 'rw,sync' &&
       ${ssh} ${targeta} "firewall-cmd --list-all" | grep rpc-bind | grep mountd | grep nfs
    then
      print_SUCCESS
    else
      print_FAIL
    fi


    pad " · Ensuring clean firewall settings ${targetb}"
    ${ssh} ${targetb} "firewall-cmd --permanent --remove-source=172.25.250.10/32 --zone=block"
    ${ssh} ${targetb} "firewall-cmd --permanent --remove-port=30080/tcp --zone=public"
    ${ssh} ${targetb} "firewall-cmd --reload"
    if ! ${ssh} ${targetb} "firewall-cmd --list-all --zone=block" | grep 172.25.250.10 &&
       ! ${ssh} ${targetb} "firewall-cmd --list-all --zone=public" | grep 30080
    then
      print_SUCCESS
    else
      print_FAIL
    fi

    pad " · Configuring Apache HTTPD on ${targetb}"
    ${ssh} ${targetb} "yum -y install httpd"
    ${ssh} ${targetb} "cp ${comp_review3_httpd_conf} ${comp_review3_httpd_tmp}"
    ${ssh} ${targetb} "sed -i 's/Listen 80/Listen 30080/' ${comp_review3_httpd_conf}"
    if ${ssh} ${targetb} "grep 'Listen 30080' ${comp_review3_httpd_conf}" &&
       ${ssh} ${targetb} "test -s ${comp_review3_httpd_tmp}"
    then
      print_SUCCESS
    else
      print_FAIL
    fi

    pad " · Ensuring no SELinux context for 30080/tcp on ${targetb}"
    ${ssh} ${targetb} "semanage port -d -t http_port_t -p tcp 30080"
    if ! ${ssh} ${targetb} "semanage port -l" | grep 30080
    then
      print_SUCCESS
    else
      print_FAIL
    fi
    ${ssh} ${targetb} "systemctl restart httpd.service"

  print_line
}

function lab_grade {

  print_header "Grading the student's work on ${targetb}:"
  host_reachable ${targetb}

  # Put in the steps to grade the lab (use print_PASS or print_FAIL)
  pad " · Verifying SSH keys on ${targetb}"
  if ${ssh} ${targetb} "${ssh} -i /home/student/.ssh/id_rsa student@${targeta} hostname"
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " · Verifying SELinux mode on ${targeta}"
  if ${ssh} ${targeta} "getenforce" | grep Permissive
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " · Verifying SELinux Boolean on ${targetb}"
  if ${ssh} ${targetb} "getsebool use_nfs_home_dirs" | grep on
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " · Verifying autofs configuration on ${targetb}"
  if sshpass -predhat ssh -o pubkeyauthentication=no -o passwordauthentication=yes production5@${targetb} "mount" | grep ${comp_review3_share} | grep ${targeta}.lab.example.com | grep /localhome/${comp_review3_user1}
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " · Verifying firewall rules on ${targetb}"
  if ! ${ssh} ${targeta} "sshpass -predhat ssh root@${targetb} hostname" &&
     ${ssh} ${targetb} "curl http://${targetb}:30080"
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " · Verifying custom Apache HTTPD port on ${targetb}"
  if curl http://${targetb}:30080
  then
    print_PASS
  else
    print_FAIL
  fi

  # Overall grade
  print_line
  pad 'Overall lab grade'
  if [[ ${fail_count} -eq 0 ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  print_line
}

function lab_finish {

  print_header "Cleaning up the lab on ${targetb}:"
  host_reachable ${targetb}

  pad " · Removing SSH keypair from ${targetb}"
  ${ssh} ${targeta} "rm -f /home/student/.ssh/authorized_keys*"
  ${ssh} ${targetb} "rm -rf /home/student/.ssh"
  if ! ${ssh} ${targetb} "test -d /home/student/.ssh" &&
     ! ${ssh} ${targetb} "test -s /home/student/.ssh/authorized_keys"
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Restoring SELinux configuration on ${targeta}"
  ${ssh} ${targeta} "cp -f ${comp_review3_selinux_tmp} ${comp_review3_selinux_conf}"
  ${ssh} ${targeta} "reboot"
  if ${ssh} -q -o "ConnectTimeout=5s" ${targeta} "hostname" &&
     ${ssh} ${targeta} "grep SELINUX=enforcing /etc/selinux/config"
  then
    print_SUCCESS
  else
    sleep 60
    if ${ssh} -q -o "ConnectTimeout=5s" ${targeta} "hostname" &&
       ${ssh} ${targeta} "grep SELINUX=enforcing /etc/selinux/config"
    then
      print_SUCCESS
    else
      sleep 60
      if ${ssh} -q -o "ConnectTimeout=5s" ${targeta} "hostname" &&
	 ${ssh} ${targeta} "grep SELINUX=enforcing /etc/selinux/config"
      then
	print_SUCCESS
      else
	sleep 60
	if ${ssh} -q -o "ConnectTimeout=5s" ${targeta} "hostname" &&
	   ${ssh} ${targeta} "grep SELINUX=enforcing /etc/selinux/config"
	then
          print_SUCCESS
	else
	  print_FAIL
	fi
      fi
    fi
  fi

  pad " · Restoring SELinux Boolean on ${targetb}"
  ${ssh} ${targetb} "setsebool -P use_nfs_home_dirs off"
  if ${ssh} ${targetb} "getsebool use_nfs_home_dirs" | grep off
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Removing firewall rules from ${targetb}"
  ${ssh} ${targetb} "firewall-cmd --permanent --remove-source=172.25.250.10/32 --zone=block"
  ${ssh} ${targetb} "firewall-cmd --permanent --remove-port=30080/tcp --zone=public"
  ${ssh} ${targetb} "firewall-cmd --reload"
  if ! ${ssh} ${targetb} "firewall-cmd --list-all --zone=block" | grep 172.25.250.10 &&
     ! ${ssh} ${targetb} "firewall-cmd --list-all --zone=public" | grep 30080
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Uninstalling Apache HTTPD from ${targetb}"
  ${ssh} ${targetb} "yum -y remove httpd"
  ${ssh} ${targetb} "rm -f ${comp_review3_httpd_tmp}"
  if ! ${ssh} ${targetb} "rpm -q httpd" &&
     ! ${ssh} ${targetb} "test -s ${comp_review3_httpd_tmp}"
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Removing SELinux context from 30080/tcp on ${targetb}"
  ${ssh} ${targetb} "semanage port -d -t http_port_t -p tcp 30080"
  if ! ${ssh} ${targetb} "semanage port -l" | grep 30080
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Removing NFS share from ${targeta}"
  ${ssh} ${targeta} "systemctl disable --now nfs-server.service"
  ${ssh} ${targeta} "firewall-cmd --permanent --remove-service=nfs; firewall-cmd --permanent --remove-service=rpc-bind; firewall-cmd --permanent --remove-service=mountd; firewall-cmd --reload"
  ${ssh} ${targeta} "rm -rf ${comp_review3_share}"
  ${ssh} ${targeta} "rm -rf /etc/exports.d/share.exports; exportfs -rv"
  if ! ${ssh} ${targeta} "grep ${comp_review2_share} ${comp_review2_share_tab} | grep ${targetb}.lab.example.com" | grep 'rw,sync' &&
     ! ${ssh} ${targeta} "firewall-cmd --list-all" | grep rpc-bind | grep mountd | grep nfs
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Disabling sshpass on ${target}"
  if rm -f /etc/yum.repos.d/ansible.repo &&
     yum -y remove sshpass
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Disabling sshpass on ${targeta}"
  if ${ssh} ${targeta} "rm -f /etc/yum.repos.d/ansible.repo" &&
     ${ssh} ${targeta} "yum -y remove sshpass"
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  print_line "You have completed attempting the comprehensive review."
  print_line "Reset workstation, servera, and serverb."

  print_line 'Comprehensive review finished.'
  print_line

}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
