#!/bin/bash
#
# Copyright 2019 Red Hat, Inc.
#
# NAME
#     lab-processes-review - grading script for RH124 Monitoring and Managing Linux Processes
#
# SYNOPSIS
#     lab-edit-review {start|grade|finish}
#
#        start   - prepare the system for starting the lab
#        grade   - perform evaluation steps on the system
#        finish  - perform post-lab cleanup
#
# DESCRIPTION
#     This script, based on singular argument, either does start, grading,
#     or finish for the Monitoring and Managing Linux Processes lab.
#
# CHANGELOG
#   * Tue May 28 2019 Victor Costea <vcostea@redhat.com>
#   - Modified grading logic
#   * Mon May 20 2019 Saumik Paul <saumik@redhat.com>
#   - updated the code to reuse variables and added the pkill command in finish
#   * Fri Feb 15 2019 Fiona Allen <fallen@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
target='serverb'
process1='process101'
process2='process102'
process3='process103'
directory='/home/student/bin'
toprc='/home/student/.config/procps/toprc'

# This defines which subcommands are supported (start, grade, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(start grade finish)


function lab_start {

  print_header 'Starting lab.'

  print_line "Preparing ${target} for lab exercise work:"
  print_line

  pad " · Verifying that ${target} is running: "
  if host_reachable ${target}
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  print_line

}

function lab_grade {

  print_header "Grading the lab:"
  host_reachable ${target}

## E2E QA changing to confirm the ${toprc} file first then
#         nest the running processes only if ${toprc} exist.
#
#  pad " · Verifying that ${process1} is not running: "
#  if ${ssh} ${target} ps -ef | grep ${process1}
#  then
#    print_FAIL
#  else
#    print_PASS
#  fi
#
#  pad " · Verifying that ${process2} is not running: "
#  if ${ssh} ${target} ps -ef | grep ${process2}
#  then
#    print_FAIL
#  else
#    print_PASS
#  fi
#      
#  pad " · Verifying that ${process3} is not running: "
#  if ${ssh} ${target} ps -ef | grep ${process3}
#  then
#   print_FAIL
#  else
#   print_PASS
#  fi
#
#  pad " · Verifying that ${toprc} exists: "
#  if ${ssh} ${target} [[ -f $toprc ]]
#  then
#    print_PASS
#  else
#    print_FAIL
#  fi

## E2E QA New grading logig
 pad " · Verifying that ${toprc} exists: "
  if ${ssh} ${target} [[ -f $toprc ]]
  then
    print_PASS
    pad " · Verifying that ${process1} is not running: "
    if ${ssh} ${target} ps -ef | grep ${process1}
    then
      print_FAIL
    else
      print_PASS
    fi
    pad " · Verifying that ${process2} is not running: "
    if ${ssh} ${target} ps -ef | grep ${process2}
    then
      print_FAIL
    else
      print_PASS
    fi
    pad " · Verifying that ${process3} is not running: "
    if ${ssh} ${target} ps -ef | grep ${process3}
    then
      print_FAIL
    else
      print_PASS
    fi
  else
    print_FAIL
  fi
  
  # Overall grade
  print_line
  pad 'Overall lab grade'
  if [[ ${fail_count} -eq 0 ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  print_line

}

function lab_finish {

  print_header "Completing the lab on workstation:"
  host_reachable ${target}
  
  # Terminating process1
  if ${ssh} ${target} "ps -ef" | grep ${process1}
  then
    pad " · Terminating process1"
    ${ssh} ${target} "pkill -9 ${process1}"
    if ! ${ssh} ${target} "ps -ef" | grep ${process1}
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  # Terminating process2
  if ${ssh} ${target} "ps -ef" | grep ${process2}
  then
    pad " · Terminating process2"
    ${ssh} ${target} "pkill -9 ${process2}"
    if ! ${ssh} ${target} "ps -ef" | grep ${process2}
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  # Terminating process3
  if ${ssh} ${target} "ps -ef" | grep ${process3}
  then
    pad " · Terminating process3"
    ${ssh} ${target} "pkill -9 ${process3}"
    if ! ${ssh} ${target} "ps -ef" | grep ${process3}
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  pad " · Deleting ${directory}: "
  if ${ssh} ${target} [[ -d $directory ]]
  then
    ${ssh} ${target} "rm -rf $directory"
    print_SUCCESS
  else
   print_SUCCESS
  fi

  pad " · Deleting ${toprc}: "
  if ${ssh} ${target} [[ -f $toprc ]]
  then
    ${ssh} ${target} "rm ${toprc}"
    print_SUCCESS
  else
    print_SUCCESS
  fi

  print_header 'Lab finished.'

}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
