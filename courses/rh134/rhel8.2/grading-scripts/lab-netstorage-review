#!/bin/bash
#
# Copyright 2019 Red Hat, Inc.
#
# NAME
#     lab-netstorage-review - Grading script for RH134 NetStorage Review Lab.
#
# SYNOPSIS
#     lab-netstorage-review {start|grade|finish}
#
#        start   - prepare the system for starting the lab
#        grade   - performs grading for the lab
#        finish  - perform post-lab cleanup
#
# DESCRIPTION
#     This script, based on singular argument, either does start or
#     finish for the RH134 NetStorage Review Lab.
#     
#     It creates groups and users on both servers as described below:
#     - "managers" (gid=1700), members manager1(uid=1701),manager2(uid=1702)
#     - "production" (gid=1800), members dbuser1(uid=1801),sysadmin1(uid=1802)
#     - "operators" (gid=1900), members contracor1(uid=1901),consultant1(uid=1902)
#     On serverb, it creates a read-write NFS v4 server that shares the
#     /shares directory.
#
# CHANGELOG
#   * Wed May 29 2019 Michael Phillips <miphilli@redhat.com>
#   - added an Overall Grade block to the grading function
#   * Thu May 03 2019 Adrian Andrade <aandrade@redhat.com>
#   - implemented test-and-set logic
#   * Wed Apr 03 2019 Adrian Andrade <aandrade@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
work='workstation'
target1='servera'
target2='serverb'
reqd_package='vim-enhanced nfs-utils'
nfs_share='/shares'
nfs_group1='managers'
nfs_group2='production'
nfs_group3='operators'
nfs_user1='manager1'
nfs_user2='manager2'
nfs_user3='dbuser1'
nfs_user4='sysadmin1'
nfs_user5='contractor1'
nfs_user6='consultant1'

# This defines which subcommands are supported (start, grade, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(start grade finish)

function lab_start {

  print_header 'Starting lab.'
  print_line

  print_line "Preparing ${target1} and ${target2} for lab exercise work:"
  print_line

  pad " · Verifying that ${target1} is running: "
  if host_reachable ${target1}
  then
    print_SUCCESS
  else
    print_FAIL
    exit
  fi

  pad " · Verifying that ${target2} is running: "
  if host_reachable ${target2}
  then
    print_SUCCESS
  else
    print_FAIL
    exit
  fi

  pad " · Preparing ${target1} for required packages: "
  ${ssh} ${target1} "yum install -y  ${reqd_package}"
  print_SUCCESS

  pad " · Preparing ${target2} for required packages: "
  ${ssh} ${target2} "yum install -y  ${reqd_package}"
  print_SUCCESS

  for host in ${target1} ${target2}
  do
    # create  groups managers(gid=1700), production(gid=1800)
    # and operators(gid=1900) on server[ab], (if necessary).
    rhel_add_group ${host} ${nfs_group1} '-g 1700'
    rhel_add_group ${host} ${nfs_group2} '-g 1800'
    rhel_add_group ${host} ${nfs_group3} '-g 1900'

    # create users(with passwords set to "redhat") on server[ab] (if necessary)
    # manager1,manager2 uid=1701,1702, (both belong to "managers" group)
    # dbuser1,sysadmin1 uid=1801,1802, (both belong to "production" group)
    # contractor1,consultant1 uid=1901,1902, (both belong to "operators" group)
    rhel_add_user ${host} ${nfs_user1} redhat "-u 1701 -G ${nfs_group1}"
    rhel_add_user ${host} ${nfs_user2} redhat "-u 1702 -G ${nfs_group1}"
    rhel_add_user ${host} ${nfs_user3} redhat "-u 1801 -G ${nfs_group2}"
    rhel_add_user ${host} ${nfs_user4} redhat "-u 1802 -G ${nfs_group2}"
    rhel_add_user ${host} ${nfs_user5} redhat "-u 1901 -G ${nfs_group3}"
    rhel_add_user ${host} ${nfs_user6} redhat "-u 1902 -G ${nfs_group3}"
  done

  # create /shares/{management,production,operation} on serverb (if necessary)
  # and populate it with files.
  if ${ssh} ${target2} "[[ ! -d ${nfs_share} ]]"
  then
    pad " · Creating required directories in ${target2}: "
    ${ssh} ${target2} "mkdir -p ${nfs_share}/{management,production,operation}"
    print_SUCCESS

    pad " · Configuring file permissions in ${target2}: "
    ${ssh} ${target2} "chmod 775 /shares"
    ${ssh} ${target2} "chmod 2770 ${nfs_share}/{management,production,operation}"
    print_SUCCESS

    pad " · Configuring group ownership on folders in ${target2}: "
    ${ssh} ${target2} "chgrp -R ${nfs_group1} ${nfs_share}/management"
    ${ssh} ${target2} "chgrp -R ${nfs_group2} ${nfs_share}/production"
    ${ssh} ${target2} "chgrp -R ${nfs_group3} ${nfs_share}/operation"
    print_SUCCESS

    pad " · Creating required files in ${target2}: "
    ${ssh} ${target2}  "cat > ${nfs_share}/management/Welcome.txt" << EOF
###Welcome to Management Folder on SERVERB###
EOF

    ${ssh} ${target2}  "cat > ${nfs_share}/production/Welcome.txt" << EOF
###Welcome to Production Folder on SERVERB###
EOF

    ${ssh} ${target2}  "cat > ${nfs_share}/operation/Welcome.txt" << EOF
###Welcome to Operation Folder on SERVERB###
EOF
    print_SUCCESS
 
    pad " · Configuring SELinux Contexts in ${target2}: "
    ${ssh} ${target2} "semanage fcontext -a -t public_content_rw_t '/shares(/.*)?'"
    ${ssh} ${target2} "restorecon -vvFR /shares/"
    print_SUCCESS
  fi

  # NFS export serverb:/shares (rw) (if necessary)
  if ${ssh} ${target2} "[[ ! -f /etc/nfs.conf-orig ]]"
  then
    pad " · Making /etc/nfs.conf backup in ${target2}: "
    ${ssh} ${target2} "cp /etc/nfs.conf{,-orig}"
    print_SUCCESS

    pad " · Configuring NFSv4 Server in ${target2}: "
    ${ssh} ${target2} "nfsconf --set nfsd udp n"
    ${ssh} ${target2} "nfsconf --set nfsd tcp y"
    ${ssh} ${target2} "nfsconf --set nfsd vers2 n"
    ${ssh} ${target2} "nfsconf --set nfsd vers3 n"
    ${ssh} ${target2} "nfsconf --set nfsd vers4  y"
    ${ssh} ${target2} "nfsconf --set nfsd vers4.0 y"
    ${ssh} ${target2} "nfsconf --set nfsd vers4.1 y"
    ${ssh} ${target2} "nfsconf --set nfsd vers4.2 y"
    ${ssh} ${target2} "echo '${nfs_share} *(rw,no_root_squash)' > /etc/exports.d/shares.exports"
    ${ssh} ${target2} "systemctl unmask --now rpc-statd.service rpcbind.service rpcbind.socket"
    ${ssh} ${target2} "systemctl enable --now nfs-server"
    print_SUCCESS

    pad " · Configuring Firewall in ${target2}: "
    ${ssh} ${target2} "firewall-cmd --add-service=nfs"
    ${ssh} ${target2} "firewall-cmd --runtime-to-permanent"
    print_SUCCESS
  fi

  if ${ssh} ${target1} "[[ ! -f /etc/nfs.conf-orig ]]"
  then
    pad " · Making /etc/nfs.conf backup in ${target1}: "
    ${ssh} ${target1} "cp /etc/nfs.conf{,-orig}"
    print_SUCCESS
  fi

  print_line

}

function lab_grade {

  print_header "Grading the lab:"
  print_line

  pad " · Verifying autofs is installed/started/enabled in ${target1}: "
  if [[ $(${ssh} ${target1} "rpm -q autofs") ]] && [[ $(${ssh} ${target1} "systemctl is-active autofs") ]] && [[ $(${ssh} ${target1} "systemctl is-enabled autofs") ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " · Verifying autofs files in ${target1}: "
  if [[ $(${ssh} ${target1} "ls -l /etc/auto.master.d/shares.autofs") ]] && [[ $(${ssh} ${target1} "ls -l /etc/auto.shares") ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " · Verifying autofs master map configuration in ${target1}: "
  if [[ $(${ssh} ${target1} "cat /etc/auto.shares | wc -l") -eq 1 ]] && [[ $(${ssh} ${target1} "grep '*' /etc/auto.shares") ]] && [[ $(${ssh} ${target1} "grep '&' /etc/auto.shares") ]] && [[ $(${ssh} ${target1} "grep 'serverb' /etc/auto.shares") ]] && [[ $(${ssh} ${target1} "grep 'shares' /etc/auto.shares") ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " · Verifying autofs indirect map configuration in ${target1}: "
  if [[ $(${ssh} ${target1} "cat /etc/auto.master.d/shares.autofs | wc -l") -eq 1 ]] && [[ $(${ssh} ${target1} "grep '/remote' /etc/auto.master.d/shares.autofs") ]] && [[ $(${ssh} ${target1} "grep '/etc/auto.shares' /etc/auto.master.d/shares.autofs") ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  pad " · Verifying autofs operation in ${target1}: "
  if [[ $(${ssh} ${target1} "sudo -u manager1 /usr/bin/cat /remote/management/Welcome.txt") ]] && [[ $(${ssh} ${target1} "sudo -u dbuser1 /usr/bin/cat /remote/production/Welcome.txt") ]] && [[ $(${ssh} ${target1} "sudo -u contractor1 /usr/bin/cat /remote/operation/Welcome.txt") ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  # Overall grade
  print_line
  pad 'Overall lab grade'
  if [[ ${fail_count} -eq 0 ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  print_line
}

function lab_finish {

  print_header "Completing the lab in ${target1} and ${target2}:"
  print_line

  # Need to disable ${target1}'s autofs service before cleaning
  # up ${target2}.
  if ${ssh} ${target1} "systemctl is-active autofs.service"
  then
    pad " · Disabling autofs from boot in ${target1}:"
    ${ssh} ${target1} "systemctl disable autofs"
    print_SUCCESS

    pad " · Rebooting ${target1}:"
    ${ssh} ${target1} "reboot"
    print_SUCCESS
  fi

  if ${ssh} ${target2} "[[ -f /etc/nfs.conf-orig ]]"
  then
    pad " · Clearing NFSv4 Server configuration in ${target2}: "
    ${ssh} ${target2} "systemctl disable --now nfs-server"
    ${ssh} ${target2} "systemctl unmask --now rpc-statd.service rpcbind.service rpcbind.socket"
    ${ssh} ${target2} "cat /etc/nfs.conf-orig > /etc/nfs.conf"
    ${ssh} ${target2} "rm -rf /etc/nfs.conf-orig"
    ${ssh} ${target2} "rm -rf /etc/exports.d/*"
    print_SUCCESS

    pad " · Removing shared directories and files in ${target2}: "
    ${ssh} ${target2} "fuser /shares"
    ${ssh} ${target2} "fuser /shares -k"
    ${ssh} ${target2} "rm -rf /shares"
    print_SUCCESS

    pad " · Restoring SELinux configuration in ${target2}: "
    ${ssh} ${target2} "semanage fcontext -d -t public_content_rw_t '/shares(/.*)?'"
    print_SUCCESS

    pad " · Restoring firewall in ${target2}: "
    ${ssh} ${target2} "firewall-cmd --remove-service=nfs"
    ${ssh} ${target2} "firewall-cmd --runtime-to-permanent"
    print_SUCCESS
  fi

  rhel_del_user ${target2} ${nfs_user1}
  rhel_del_user ${target2} ${nfs_user2}
  rhel_del_user ${target2} ${nfs_user3}
  rhel_del_user ${target2} ${nfs_user4}
  rhel_del_user ${target2} ${nfs_user5}
  rhel_del_user ${target2} ${nfs_user6}
  rhel_del_group ${target2} ${nfs_group1}
  rhel_del_group ${target2} ${nfs_group2}
  rhel_del_group ${target2} ${nfs_group3}

  pad " · Waiting for ${target1} to become available: "
  if ssh -q -o "ConnectTimeout=5s" ${target1} "hostname"
  then
    print_SUCCESS
  else
    sleep 60
    if ssh -q -o "ConnectTimeout=5s" ${target1} "hostname"
    then
      print_SUCCESS
    else
      sleep 60
      if ssh -q -o "ConnectTimeout=5s" ${target1} "hostname"
      then
        print_SUCCESS
      else
        sleep 60
        if ssh -q -o "ConnectTimeout=5s" ${target1} "hostname"
        then
          print_SUCCESS
        else
          sleep 60
          if ssh -q -o "ConnectTimeout=5s" ${target1} "hostname"
          then
            print_SUCCESS
          else
            print_FAIL
          fi
        fi
      fi
    fi  
  fi

  if ${ssh} ${target1} "[[ -f /etc/nfs.conf-orig ]]"
  then
    pad " · Clearing NFSv4 Client configuration in ${target1}: "
    ${ssh} ${target1} "cat /etc/nfs.conf-orig > /etc/nfs.conf"
    ${ssh} ${target1} "rm -rf /etc/nfs.conf-orig"
    print_SUCCESS
  fi

  if ${ssh} ${target1} "rpm -q autofs"
  then
    pad " · Uninstalling packages in ${target1}:"
    ${ssh} ${target1} "yum remove -y autofs"
    print_SUCCESS

    pad " · Removing exercise files in ${target1}: "
    ${ssh} ${target1} "rm -rf /etc/auto.*"
    print_SUCCESS
  fi

  rhel_del_user ${target1} ${nfs_user1}
  rhel_del_user ${target1} ${nfs_user2}
  rhel_del_user ${target1} ${nfs_user3}
  rhel_del_user ${target1} ${nfs_user4}
  rhel_del_user ${target1} ${nfs_user5}
  rhel_del_user ${target1} ${nfs_user6}
  rhel_del_group ${target1} ${nfs_group1}
  rhel_del_group ${target1} ${nfs_group2}
  rhel_del_group ${target1} ${nfs_group3}

  print_header 'Lab finished.'

}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
