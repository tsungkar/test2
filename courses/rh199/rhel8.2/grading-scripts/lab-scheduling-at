#!/bin/bash
#
# Copyright 2019 Red Hat, Inc.
#
# NAME
#     lab-scheduling-at - grading script for RH124 Scheduling a Job with At
#
# SYNOPSIS
#     lab-scheduling-at {start|finish}
#
#        start   - prepare the system for starting the lab
#        finish  - perform post-lab cleanup
#
# DESCRIPTION
#     This script, based on singular argument, either does start
#     or finish for the Scheduling a Deferred User Job Guided Exercise. 
#
# CHANGELOG
#   * Thu Mar 21 2019 Saumik Paul <saumik@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
target='servera'
ge_user='student'
myjob_txt='/home/student/myjob.txt'
tea_txt='/home/student/tea.txt'
cookies_txt='/home/student/cookies.txt'

# This defines which subcommands are supported (start, grade, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(start finish)


function lab_start {

  reqd_package='at'        # Just an example

  print_header 'Starting lab.'

  print_line "Preparing ${target} for lab exercise work:"
  print_line
  host_reachable ${target}


  # Check for lab prerequisites (perhaps a required package?).
  if ! ${ssh} ${target} "rpm -q --quiet ${reqd_package}"
  then
    pad " · Error - ${reqd_package} is not installed on ${target}"
    print_FAIL
  else
    pad " · Ensuring no deferred jobs for ${ge_user} on ${target}"
    at_jobs=$(${ssh} ${ge_user}@${target} "atq | wc -l")
    if [ "${at_jobs}" -eq 0 ] 
    then
      print_SUCCESS
    else
      ${ssh} ${target} "rm -f /var/spool/at/*; rm -f /var/spool/at/.SEQ; touch /var/spool/at/.SEQ" 2>/dev/null &&
      at_jobs=$(${ssh} ${ge_user}@${target} "atq | wc -l")
      if [ "${at_jobs}" -eq 0 ] 
      then
	print_SUCCESS
      else
	print_FAIL
      fi
    fi

    pad " · Ensuring ${myjob_txt} does not exist on ${target}"
    if ! ${ssh} ${target} "test -e ${myjob_txt}"
    then
      print_SUCCESS
    else
      ${ssh} ${target} "rm -f ${myjob_txt}"
      if ! ${ssh} ${target} "test -e ${myjob_txt}"
      then
	print_SUCCESS
      else
	print_FAIL
      fi
    fi

    pad " · Ensuring ${tea_txt} does not exist on ${target}"
    if ! ${ssh} ${target} "test -e ${tea_txt}"
    then
      print_SUCCESS
    else
      ${ssh} ${target} "rm -f ${tea_txt}"
      if ! ${ssh} ${target} "test -e ${tea_txt}"
      then
	print_SUCCESS
      else
	print_FAIL
      fi
    fi

    pad " · Ensuring ${cookies_txt} does not exist on ${target}"
    if ! ${ssh} ${target} "test -e ${cookies_txt}"
    then
      print_SUCCESS
    else
      ${ssh} ${target} "rm -f ${cookies_txt}"
      if ! ${ssh} ${target} "test -e ${cookies_txt}"
      then
	print_SUCCESS
      else
	print_FAIL
      fi
    fi


    print_line
  fi
}

function lab_finish {

  print_header "Completing the lab on ${target}:"
  host_reachable ${target}

  pad " · Removing deferred jobs for ${ge_user} on ${target}"
  at_jobs=$(${ssh} ${ge_user}@${target} "atq | wc -l")
  if [ "${at_jobs}" -eq 0 ] 
  then
    print_SUCCESS
  else
    ${ssh} ${target} "rm -f /var/spool/at/*; rm -f /var/spool/at/.SEQ; touch /var/spool/at/.SEQ" 2>/dev/null &&
    at_jobs=$(${ssh} ${ge_user}@${target} "atq | wc -l")
    if [ "${at_jobs}" -eq 0 ] 
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  pad " · Removing ${myjob_txt} from ${target}"
  if ! ${ssh} ${target} "test -e ${myjob_txt}"
  then
    print_SUCCESS
  else
    ${ssh} ${target} "rm -f ${myjob_txt}"
    if ! ${ssh} ${target} "test -e ${myjob_txt}"
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  pad " · Removing ${tea_txt} from ${target}"
  if ! ${ssh} ${target} "test -e ${tea_txt}"
  then
    print_SUCCESS
  else
    ${ssh} ${target} "rm -f ${tea_txt}"
    if ! ${ssh} ${target} "test -e ${tea_txt}"
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  pad " · Removing ${cookies_txt} from ${target}"
  if ! ${ssh} ${target} "test -e ${cookies_txt}"
  then
    print_SUCCESS
  else
    ${ssh} ${target} "rm -f ${cookies_txt}"
    if ! ${ssh} ${target} "test -e ${cookies_txt}"
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi


  print_line
  print_line 'Lab finished.'
  print_line
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
